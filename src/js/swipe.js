var spotify_UserID = null;
var spotify_PlaylistID = null;
var spotify_song_url = null;
var spotify_song_id = null;

window.onload = function () {
    initPopups();
    initLogout();
    //setup to get the first song
    checkConnected().then(
        function(){
            checkAccessToken();
            getSpotifyUserID().then(
                function(){
                    checkPlaylist().then(
                        function(){
                            getValidSong();
                        },
                        function(){
                            createPlaylist().then(
                                function(){
                                    getValidSong();
                                },
                                function(){}
                            );
                        }
                    );
                },
                function(){}
            );
        },
        function(){}
    );
};

function getSpotifyUserID(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    spotify_UserID = response.id;
                    resolve();
                } else {
                    reject();
                }
            }
        };
        xhttp.open("get", "https://api.spotify.com/v1/me", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function checkPlaylist(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    for(let i = 0; i < response.items.length; i++){
                        if(response.items[i].name == "Tinify"){
                            spotify_PlaylistID = response.items[i].id;
                            break;
                        }
                    }
                    if(spotify_PlaylistID != null){
                        resolve();
                    } else {
                        reject();
                    }
                } else {
                    reject();
                }
            }
        };
        xhttp.open("get", "https://api.spotify.com/v1/me/playlists", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function createPlaylist(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    spotify_PlaylistID = response.id;
                    resolve();
                } else {
                    reject();
                }
            }
        };
        xhttp.open("post", "https://api.spotify.com/v1/users/"+spotify_UserID+"/playlists", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send(JSON.stringify({ "name": "Tinify", "description": "Autogenerated Playlist from Tinify", "public": false}));
    });
}

function loadSong(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    resolve({"id":response.tracks.items[0].id,"name":response.tracks.items[0].name,"preview_url":response.tracks.items[0].preview_url, "artists": response.tracks.items[0].artists, "cover":response.tracks.items[0].album.images[0].url});
                } else {
                    reject();
                }
            }
        };
        const randomOffset = Math.floor(Math.random() * 1000);
        xhttp.open("get", "https://api.spotify.com/v1/search?type=track&limit=1&offset="+randomOffset+"&q="+getRandomSearch(), true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

async function getValidSong() {
    await loadSong().then(
        function(data){
            if(data.preview_url == null){
                getValidSong();
            } else {
                displaySong(data);
            }
        },
        function(data){
            getValidSong();
        }
    );
}

function displaySong(data) {
    let image = document.getElementById("swipe-cart-image-container");
    let title = document.getElementById("swipe-cart-title");
    let artists = document.getElementById("swipe-cart-artist");

    title.innerText = data.name;
    let artiststext = "";
    for(let i = 0; i < data.artists.length; i++){
        artiststext += data.artists[i].name;
        if(i != data.artists.length-1){
            artiststext += ", ";
        }
    }
    artists.innerText = artiststext;

    image.style.backgroundImage = "url("+data.cover+")";
    image.style.backgroundSize = "100% auto, cover";

    spotify_song_url = data.preview_url;
}

function getRandomSearch() {
    const characters = 'abcdefghijklmnopqrstuvwxyz';
    
    const randomCharacter = characters.charAt(Math.floor(Math.random() * characters.length));
    let randomSearch = '';
  
    switch (Math.round(Math.random())) {
      case 0:
        randomSearch = randomCharacter + '%';
        break;
      case 1:
        randomSearch = '%' + randomCharacter + '%';
        break;
    }
  
    return encodeURI(randomSearch);
}

function initLogout(){
    document.getElementById("swipe-popup-logout").addEventListener("click", logout);
}

function logout(){
    localStorage.removeItem("accesstoken");   
    localStorage.removeItem("expireDate");
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4){
            if(this.status == 200) {
                window.location.href = "/";
            }
        }
    };
    xhttp.open("post", "/logout", true);
    xhttp.send();
}

function checkConnected(){
    return new Promise(function(resolve,reject){
        let spotifyLogin = document.getElementById("swipe-login-spotify");
        let cart = document.getElementById("swipe-cart-container");
        let spotifyButton = document.getElementById("spotify-login-button");
    
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText);
                    if(response.connected){
                        spotifyLogin.style.display = "none";
                        cart.style.display = "block";
                        resolve();
                    } else {
                        spotifyLogin.style.display = "block";
                        spotifyButton.addEventListener("click",function(){
                            window.location.href = response.link;
                        });
                        cart.style.display = "none";
                        reject();
                    }
                } else {
                    spotifyLogin.style.display = "block";
                    cart.style.display = "none";
                    spotifyLogin.innerText = "An error occured please reload the site";
                    reject();
                }
            }
        };
        xhttp.open("post", "/user/connected", true);
        xhttp.send();
    });
}

async function checkAccessToken(){
    if(localStorage.accesstoken && localStorage.expireDate){
        if(localStorage.expireDate < Date.now()+5000){
            await requestAccessToken();
        }
    } else {
        await requestAccessToken();
    }
}

function requestAccessToken(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    localStorage.setItem("accesstoken", response.access_token);
                    localStorage.setItem("expireDate", response.expires);
                    resolve();
                } else {
                    console.log("error no new accesstoken");
                    reject();
                }
            }
        };
        xhttp.open("get", "/get/accesstoken", true);
        xhttp.send();
    });
}