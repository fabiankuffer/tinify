function getSpotifyUserID(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    spotify_UserID = response.id;
                    resolve();
                } else {
                    reject();
                }
            }
        };
        xhttp.open("get", "https://api.spotify.com/v1/me", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function checkPlaylist(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    for(let i = 0; i < response.items.length; i++){
                        if(response.items[i].name == "Tinify"){
                            spotify_PlaylistID = response.items[i].id;
                            break;
                        }
                    }
                    if(spotify_PlaylistID != null){
                        resolve();
                    } else {
                        reject();
                    }
                } else {
                    reject();
                }
            }
        };
        xhttp.open("get", "https://api.spotify.com/v1/me/playlists", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function createPlaylist(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200 || this.status == 201) {
                    let response = JSON.parse(xhttp.responseText); 
                    spotify_PlaylistID = response.id;
                    resolve();
                } else {
                    reject();
                }
            }
        };
        xhttp.open("post", "https://api.spotify.com/v1/users/"+spotify_UserID+"/playlists", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send(JSON.stringify({ "name": "Tinify", "description": "Autogenerated Playlist from Tinify", "public": false}));
    });
}

function loadSong(){
    if(recommendation == 0){
        return randomSong();
    } else {
        return recommendedSong();
    }
}

function getTopTracks(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    if(response.hasOwnProperty("items")){
                        if(response.items.length > 0){
                            resolve({"items":response.items});
                        } else {
                            reject();
                        }
                    } else {
                        reject();
                    }
                } else {
                    reject();
                }
            }
        };
        xhttp.open("get", "https://api.spotify.com/v1/me/top/tracks?limit=10", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function getTopArtists(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    if(response.hasOwnProperty("items")){
                        if(response.items.length > 0){
                            resolve({"items":response.items});
                        } else {
                            reject();
                        }
                    } else {
                        reject();
                    }
                } else {
                    reject();
                }
            }
        };
        xhttp.open("get", "https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=10", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function recommendedSong(){
    return new Promise(function(resolve,reject){
        getTopTracks().then(
            function(dataTracks){
                let seedtrack = dataTracks.items[Math.floor(Math.random() * dataTracks.items.length)].id;
                getTopArtists().then(
                    function(dataArtists){
                        let seedArtist = dataArtists.items[Math.floor(Math.random() * dataArtists.items.length)].id;
                        //create genre string
                        let genres = "";
                        for(let i = 0; i < 3; i++){
                            let genreArray = dataArtists.items[Math.floor(Math.random() * dataArtists.items.length)].genres;
                            if(genreArray.length > 0){
                                genres = genres + genreArray[Math.floor(Math.random() * genreArray.length)];
                                if(i != 2){
                                    genres = genres + ",";
                                }
                            }
                        }
                        genres = encodeURI(genres);

                        let xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function() {
                            if (this.readyState == 4){
                                if(this.status == 200) {
                                    let response = JSON.parse(xhttp.responseText); 
                                    resolve({"id":response.tracks[0].id,"name":response.tracks[0].name,"preview_url":response.tracks[0].preview_url, "artists": response.tracks[0].artists, "cover":response.tracks[0].album.images[0].url});
                                } else {
                                    reject({"displayError":true});
                                }
                            }
                        };
                        xhttp.open("get", "https://api.spotify.com/v1/recommendations?limit=25&seed_artists="+encodeURI(seedArtist)+"&seed_genres="+genres+"&seed_tracks="+encodeURI(seedtrack), true);
                        xhttp.setRequestHeader("Accept","application/json");
                        xhttp.setRequestHeader("Content-Type","application/json");
                        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
                        xhttp.send();
                    },
                    function(){
                        displayInSnackbar("Spotify does not yet have enough information about your song taste");
                        reject({"displayError":false});
                    }
                );
            },
            function(){
                displayInSnackbar("Spotify does not yet have enough information about your song taste");
                reject({"displayError":false});
            }
        );
    });
}

function randomSong(){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200) {
                    let response = JSON.parse(xhttp.responseText); 
                    resolve({"id":response.tracks.items[0].id,"name":response.tracks.items[0].name,"preview_url":response.tracks.items[0].preview_url, "artists": response.tracks.items[0].artists, "cover":response.tracks.items[0].album.images[0].url});
                } else {
                    reject({"displayError":true});
                }
            }
        };
        const randomOffset = Math.floor(Math.random() * 1000);
        xhttp.open("get", "https://api.spotify.com/v1/search?type=track&limit=1&offset="+randomOffset+"&q="+getRandomSearch(), true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send();
    });
}

function addSongToPlaylist(song_id, playlist_id){
    return new Promise(function(resolve, reject){
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4){
                if(this.status == 200 || this.status == 201) {
                    resolve();
                } else {
                    reject();
                }
            }
        };
        xhttp.open("post", "https://api.spotify.com/v1/playlists/"+playlist_id+"/tracks", true);
        xhttp.setRequestHeader("Accept","application/json");
        xhttp.setRequestHeader("Content-Type","application/json");
        xhttp.setRequestHeader("Authorization","Bearer "+localStorage.getItem("accesstoken"));
        xhttp.send(JSON.stringify({"uris": ["spotify:track:"+song_id]}));
    });
}

async function getValidSong(count = 0) {
    if(count < 100){
        await checkAccessToken().finally(
            async function(){
                await loadSong().then(
                    function(data){
                        if(data.preview_url == null){
                            getValidSong(count+1);
                        } else {
                            checkReviewed(data.id).then(
                                function(){
                                    displaySong(data);
                                },
                                function(){
                                    getValidSong(count+1);
                                }
                            );
                        }
                    },
                    function(data){
                        if(data.displayError){
                            displayInSnackbar("Spotify error");
                        }
                    }
                );
            }
        );
    } else {
        displayInSnackbar("100 songs searched no new found");
    }
}